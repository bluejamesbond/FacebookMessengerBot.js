{"version":3,"sources":["../src/Buttons.js"],"names":["Buttons","_buttons","text","data","url","phone","event","account_linking","Error","push","buttons","button","linking","type","console","log","title","payload","length","array","forEach","add","arg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAAMA,O;AACJ,qBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;8BAEqD;AAAA,UAAjDC,IAAiD,QAAjDA,IAAiD;AAAA,UAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,UAArCC,GAAqC,QAArCA,GAAqC;AAAA,UAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,UAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,UAAlBC,eAAkB,QAAlBA,eAAkB;;AACpD,UAAI,CAACJ,IAAD,IAAS,CAACC,GAAV,IAAiB,CAACE,KAAlB,IAA2B,CAACD,KAAhC,EAAuC;AACrC,cAAMG,MAAM,iFAAN,CAAN;AACD;;AAED,WAAKP,QAAL,CAAcQ,IAAd,CAAmB,EAACP,MAAMA,QAAQ,QAAf,EAAyBI,YAAzB,EAAgCH,UAAhC,EAAsCE,YAAtC,EAA6CD,QAA7C,EAAkDG,gCAAlD,EAAnB;AACA,aAAO,IAAP;AACD;;;6BAEQ;AACP,UAAMG,UAAU,EAAhB;AADO;AAAA;AAAA;;AAAA;AAEP,wDAAqB,KAAKT,QAA1B,4GAAoC;AAAA,cAAzBU,MAAyB;;AAClC,cAAIA,OAAOJ,eAAX,EAA4B;AAC1B,gBAAI,CAACI,OAAOJ,eAAP,CAAuBK,OAA5B,EAAqC;AACnCF,sBAAQD,IAAR,CAAa,EAACI,MAAM,gBAAP,EAAb;AACD,aAFD,MAGK,IAAIF,OAAOP,GAAX,EAAgB;AACnBM,sBAAQD,IAAR,CAAa,EAACI,MAAM,cAAP,EAAuBT,KAAKO,OAAOP,GAAnC,EAAb;AACD,aAFI,MAGA;AACHU,sBAAQC,GAAR,CAAY,gDAAZ;AACD;AACF,WAVD,MAWK,IAAIJ,OAAOP,GAAX,EAAgB;AACnBM,oBAAQD,IAAR,CAAa,EAACI,MAAM,SAAP,EAAkBT,KAAKO,OAAOP,GAA9B,EAAmCY,OAAOL,OAAOT,IAAjD,EAAb;AACD,WAFI,MAEE,IAAIS,OAAOR,IAAX,EAAiB;AACtB,gBAAMc,UAAU,yBAAe,EAACd,MAAMQ,OAAOR,IAAd,EAAoBG,OAAOK,OAAOL,KAAlC,EAAf,CAAhB;AACAI,oBAAQD,IAAR,CAAa,EAACI,MAAM,UAAP,EAAmBI,gBAAnB,EAA4BD,OAAOL,OAAOT,IAA1C,EAAb;AACD,WAHM,MAGA,IAAIS,OAAON,KAAX,EAAkB;AACvBK,oBAAQD,IAAR,CAAa,EAACI,MAAM,cAAP,EAAuBI,SAASN,OAAON,KAAvC,EAA8CW,OAAOL,OAAOT,IAA5D,EAAb;AACD;AACF;AAtBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBP,aAAOQ,OAAP;AACD;;;wBAQY;AACX,aAAO,KAAKT,QAAL,CAAciB,MAArB;AACD;;;yBARWC,K,EAAO;AACjB,UAAMT,UAAU,IAAIV,OAAJ,EAAhB;AACAmB,YAAMC,OAAN,CAAc;AAAA,eAAOV,QAAQW,GAAR,CAAYC,GAAZ,CAAP;AAAA,OAAd;AACA,aAAOZ,OAAP;AACD;;;;;kBAOYV,O","file":"Buttons.js","sourcesContent":["class Buttons {\n  constructor() {\n    this._buttons = [];\n  }\n\n  add({text, data, url, phone, event, account_linking}) {\n    if (!data && !url && !event && !phone) {\n      throw Error('Must provide a url or data i.e. {data: null} or {url: \\'https://facebook.com\\'}');\n    }\n\n    this._buttons.push({text: text || 'Button', event, data, phone, url, account_linking});\n    return this;\n  }\n\n  toJSON() {\n    const buttons = [];\n    for (const button of this._buttons) {\n      if (button.account_linking) {\n        if (!button.account_linking.linking) {\n          buttons.push({type: 'account_unlink'})\n        }\n        else if (button.url) {\n          buttons.push({type: 'account_link', url: button.url});\n        }\n        else {\n          console.log('[fb-msger-bot] Missing url for account linking');\n        }\n      }\n      else if (button.url) {\n        buttons.push({type: 'web_url', url: button.url, title: button.text});\n      } else if (button.data) {\n        const payload = JSON.stringify({data: button.data, event: button.event});\n        buttons.push({type: 'postback', payload, title: button.text});\n      } else if (button.phone) {\n        buttons.push({type: 'phone_number', payload: button.phone, title: button.text});\n      }\n    }\n\n    return buttons;\n  }\n\n  static from(array) {\n    const buttons = new Buttons();\n    array.forEach(arg => buttons.add(arg));\n    return buttons;\n  }\n\n  get length() {\n    return this._buttons.length;\n  }\n}\n\nexport default Buttons;\n"]}